name: (BF) Build & Review & Acceptance tests
on:
  pull_request:
    paths:
      - "backend/benefit/**"
      - "frontend/benefit/**"
      - "frontend/shared/**"
      - "frontend/*"
      - ".github/workflows/bf-review.yml"
      - '!frontend/**/__tests__'
      - '!**/README.md'
  workflow_dispatch:
    inputs:
      build_required:
        description: "Build images (true/false)"
        required: true
        default: "false"
      pr_number:
        description: "Pull request number (if redeploy without build) or own number for environment"
        required: true

env:
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_REGISTRY_USER: ${{ secrets.GHCR_CONTAINER_REGISTRY_USER }}
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.GHCR_TOKEN }}
  CONTAINER_REGISTRY_REPO: ghcr.io/city-of-helsinki/${{ github.event.repository.name }}
  REPO_NAME: ${{ github.event.repository.name }}
  KUBECONFIG_RAW: ${{ secrets.KUBECONFIG_RAW }}
  BUILD_ARTIFACT_FOLDER: "build_artifacts"
  SERVICE_ARTIFACT_FOLDER: "service_artifacts"
  BASE_DOMAIN: ${{ secrets.BASE_DOMAIN_STAGING }}
  DATABASE_USER: user
  DATABASE_PASSWORD: testing-password
  K8S_REQUEST_CPU: 5m
  K8S_REQUEST_RAM: 256Mi
  K8S_LIMIT_CPU: 500m
  K8S_LIMIT_RAM: 428Mi
  K8S_PROBE_FAILURE_THRESHOLD: 30
  K8S_PROBE_PERIOD: 20
  HELM_BUFFER_TIME: 300
  NEXT_PUBLIC_BACKEND_URL: https://helsinkibenefit-bf-bknd-${{ github.event.pull_request.number }}.${{ secrets.BASE_DOMAIN_STAGING }}
  NEXT_PUBLIC_MOCK_FLAG: 1
  MOCK_FLAG: 1
  DISABLE_AUTHENTICATION: 1
jobs:
  build:
    # No building for dependabot PRs
    # See https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/automating-dependabot-with-github-actions#handling-pull_request-events
    if: ${{ github.actor != 'dependabot[bot]' }}
    strategy:
      fail-fast: false
      matrix:
        service: ["bf-bknd", "bf-appl", "bf-hdlr"]
        include:
          - service: bf-bknd
            context: ./backend
            dockerfile: ./backend/docker/benefit.Dockerfile
            port: 8000
          - service: bf-appl
            context: ./frontend
            dockerfile: ./frontend/benefit/applicant/Dockerfile
            port: 3000
          - service: bf-hdlr
            context: ./frontend
            dockerfile: ./frontend/benefit/handler/Dockerfile
            port: 3100
    concurrency:
      group: ${{ github.event.pull_request.number }}-${{ matrix.service }}
      cancel-in-progress: false
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v2

      - name: Build ${{ matrix.service }}
        if: github.event_name == 'pull_request' || github.event.inputs.build_required == 'true'
        uses: andersinno/kolga-build-action@v2
        env:
          DOCKER_BUILD_ARG_NEXT_PUBLIC_BACKEND_URL: ${{ env.NEXT_PUBLIC_BACKEND_URL }}
          DOCKER_BUILD_ARG_NEXT_PUBLIC_MOCK_FLAG: ${{ env.NEXT_PUBLIC_MOCK_FLAG }}
          DOCKER_BUILD_SOURCE: ${{ matrix.dockerfile }}
          DOCKER_BUILD_CONTEXT: ${{ matrix.context }}
          DOCKER_IMAGE_NAME: ${{ matrix.service }}
          SERVICE_PORT: ${{ matrix.port }}
          BUILDKIT_CACHE_DISABLE: true
  review:
    strategy:
      fail-fast: false
      matrix:
        service: ["bf-bknd", "bf-appl", "bf-hdlr"]
        include:
          - service: bf-bknd
            context: ./backend
            dockerfile: ./backend/docker/benefit.Dockerfile
            database: true
            port: 8000
          - service: bf-appl
            context: frontend
            dir: benefit/applicant
            dockerfile: ./frontend/benefit/applicant/Dockerfile
            database: false
            port: 3000
          - service: bf-hdlr
            context: frontend
            dockerfile: ./frontend/benefit/handler/Dockerfile
            database: false
            port: 3100
    concurrency:
      group: ${{ github.event.pull_request.number }}-${{ matrix.service }}
      cancel-in-progress: false
    runs-on: ubuntu-latest
    needs: build
    name: Review
    steps:
      - uses: actions/checkout@v2
      - uses: andersinno/kolga-setup-action@v2
        with:
          pr_number: ${{ github.event.inputs.pr_number }}

      - name: Backend variables
        if: matrix.database
        env:
          SECRET_KEY: ${{ secrets.K8S_SECRET_SECRET_KEY_REVIEW }}
          K8S_SECRET_ENCRYPTION_KEY: ${{ secrets.K8S_SECRET_ENCRYPTION_KEY_REVIEW }}
          K8S_SECRET_SOCIAL_SECURITY_NUMBER_HASH_KEY: ${{ secrets.K8S_SECRET_SOCIAL_SECURITY_NUMBER_HASH_KEY_REVIEW }}
          K8S_SECRET_PREVIOUS_BENEFITS_SOCIAL_SECURITY_NUMBER_HASH_KEY: ${{ secrets.K8S_SECRET_SOCIAL_SECURITY_NUMBER_HASH_KEY_REVIEW }}
        run: |
          echo "K8S_SECRET_ALLOWED_HOSTS=*" >> $GITHUB_ENV
          echo "K8S_SECRET_CREATE_SUPERUSER=${{ secrets.K8S_SECRET_CREATE_SUPERUSER_REVIEW }}" >> $GITHUB_ENV
          echo "K8S_SECRET_ADMIN_USER_PASSWORD=${{ secrets.K8S_SECRET_ADMIN_USER_PASSWORD_REVIEW }}" >> $GITHUB_ENV
          echo "K8S_SECRET_SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV
          echo "K8S_SECRET_CSRF_COOKIE_DOMAIN=.test.kuva.hel.ninja" >> $GITHUB_ENV
          echo "K8S_SECRET_CORS_ALLOWED_ORIGINS=${{ env.FRONTEND_URL }}" >> $GITHUB_ENV
          echo "K8S_SECRET_CSRF_TRUSTED_ORIGINS=.test.kuva.hel.ninja" >> $GITHUB_ENV
          echo "K8S_SECRET_DATABASE_DB=${{ github.event.repository.name }}-${{ matrix.service }}-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "K8S_SECRET_DATABASE_HOST=${{ secrets.K8S_SECRET_DATABASE_HOST_REVIEW }}" >> $GITHUB_ENV
          echo "K8S_SECRET_DATABASE_PORT=${{ secrets.K8S_SECRET_DATABASE_PORT_REVIEW }}" >> $GITHUB_ENV
          echo "K8S_SECRET_DATABASE_USERNAME=${{ secrets.K8S_SECRET_DATABASE_USERNAME_REVIEW }}" >> $GITHUB_ENV
          echo "K8S_SECRET_DATABASE_PASSWORD=${{ secrets.K8S_SECRET_DATABASE_PASSWORD_REVIEW }}" >> $GITHUB_ENV
          echo "K8S_SECRET_DATABASE_URL=postgresql://${{ secrets.K8S_SECRET_DATABASE_USERNAME_REVIEW }}:${{ secrets.K8S_SECRET_DATABASE_PASSWORD_REVIEW }}@${{ secrets.K8S_SECRET_DATABASE_HOST_REVIEW}}:${{ secrets.K8S_SECRET_DATABASE_PORT_REVIEW }}/${{ github.event.repository.name }}-${{ matrix.service }}-${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Review-Services
        if: matrix.database
        uses: City-of-Helsinki/review-services-action@main
        with:
          database: ${{ github.event.repository.name }}-${{ matrix.service }}-${{ github.event.pull_request.number }}
          namespace: ${{ env.K8S_NAMESPACE }}
          action: create
          db_user: ${{ secrets.K8S_SECRET_DATABASE_ADMIN_USERNAME_REVIEW }}
          db_password: ${{ secrets.K8S_SECRET_DATABASE_ADMIN_PASSWORD_REVIEW}}
          db_host: ${{ secrets.K8S_SECRET_DATABASE_HOST_REVIEW }}
          db_port: ${{ secrets.K8S_SECRET_DATABASE_PORT_REVIEW }}
          kubeconfig: ${{ secrets.KUBECONFIG_RAW }}

      - name: Service with ingress
        run: |
          echo "ENVIRONMENT_URL=https://helsinkibenefit-${{ matrix.service }}-${{ github.event.pull_request.number }}.${{ env.BASE_DOMAIN }}" >> $GITHUB_ENV
      - name: Deploy
        uses: andersinno/kolga-deploy-action@v2
        env:
          DOCKER_BUILD_SOURCE: ${{ matrix.dockerfile }}
          DOCKER_BUILD_CONTEXT: ./${{ matrix.context }}
          DOCKER_IMAGE_NAME: ${{ matrix.service }}
          PROJECT_NAME: ${{ github.event.repository.name }}-${{ matrix.service }}
          K8S_SECRET_VERSION: ${{ github.sha }}
          VAULT_JWT_PRIVATE_KEY: ${{ secrets.VAULT_ACCESS_PRIVATE_KEY_REVIEW }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_KV_VERSION: "2"
          VAULT_JWT_AUTH_PATH: ${{ github.event.repository.name }}-${{ matrix.service }}-review
          VAULT_KV_SECRET_MOUNT_POINT: review
          SERVICE_PORT: ${{ matrix.port }}
          K8S_SECRET_ALLOWED_HOSTS: "*"
          APP_MIGRATE_COMMAND: ${{ matrix.database == 'true' && '/app/.prod/on_deploy.sh' || ''}}
      - name: Create PR comment for helsinkibenefit-V${{ matrix.service }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: deployment-helsinkibenefit-${{ matrix.service }}
          message: |
            **Helsinkibenefit-${{ matrix.service }} is deployed to: ${{ env.ENVIRONMENT_URL }}** :rocket::rocket::rocket:
      - name: Run Acceptance Tests for ${{ matrix.service }}
        id: testcafe
        run: yarn --cwd ${{ matrix.dir }} browser-test:ci
        env:
          APPLICANT_URL: ${{ env.ENVIRONMENT_URL }}
#      # Temporary commented out because these tasks block the review pipeline
#      - name: Deploy Quarter Hourly Cronjobs
#        uses: City-of-Helsinki/setup-cronjob-action@main
#        with:
#          image_repository: ghcr.io/city-of-helsinki/${{ github.event.repository.name }}
#          image_tag: ${{ github.sha }}
#          secret_name: project-yjdh-benefit-secret
#          kubeconfig_raw: ${{ secrets.KUBECONFIG_RAW_STAGING}}
#          target_namespace: ${{ secrets.K8S_NAMESPACE_STAGING }}
#          name: "benefit-quarter-hourly-cronjob"
#          schedule: "*/15 * * * *"
#          command: "{/bin/sh}"
#          args: "{-c,cd /app && /usr/bin/timeout --kill-after=20m 19m python manage.py runjobs quarter_hourly 2>&1}"
#      - name: Deploy Monthly Cronjobs
#        uses: City-of-Helsinki/setup-cronjob-action@main
#        with:
#          image_repository: ghcr.io/city-of-helsinki/${{ github.event.repository.name }}
#          image_tag: ${{ github.sha }}
#          secret_name: project-yjdh-benefit-secret
#          kubeconfig_raw: ${{ secrets.KUBECONFIG_RAW_STAGING}}
#          target_namespace: ${{ secrets.K8S_NAMESPACE_STAGING }}
#          name: "benefit-monthly-cronjob"
#          schedule: "0 0 1 * *"
#          command: "{/bin/sh}"
#          args: "{-c,cd /app && /usr/bin/timeout --kill-after=20m 19m python manage.py runjobs monthly 2>&1}"
